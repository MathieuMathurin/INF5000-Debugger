/* This file was generated by SableCC (http://www.sablecc.org/). */

package funlang.syntax.parser;

import funlang.syntax.lexer.*;
import funlang.syntax.node.*;
import funlang.syntax.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAprogram1Program */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAprogram2Program */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce AAfunc1Func */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AAfunc2Func */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce AAfunc3Func */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list, false);
            }
            break;
            case 5: /* reduce AAfunc4Func */
            {
                ArrayList<Object> list = new5();
                push(goTo(1), list, false);
            }
            break;
            case 6: /* reduce ABlockBody */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list, false);
            }
            break;
            case 7: /* reduce AInternalBody */
            {
                ArrayList<Object> list = new7();
                push(goTo(2), list, false);
            }
            break;
            case 8: /* reduce AAparams1Params */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list, false);
            }
            break;
            case 9: /* reduce AAparams2Params */
            {
                ArrayList<Object> list = new9();
                push(goTo(3), list, false);
            }
            break;
            case 10: /* reduce AAdditionalParam */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list, false);
            }
            break;
            case 11: /* reduce AParam */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list, false);
            }
            break;
            case 12: /* reduce AReturnType */
            {
                ArrayList<Object> list = new12();
                push(goTo(6), list, false);
            }
            break;
            case 13: /* reduce AIntType */
            {
                ArrayList<Object> list = new13();
                push(goTo(7), list, false);
            }
            break;
            case 14: /* reduce ABoolType */
            {
                ArrayList<Object> list = new14();
                push(goTo(7), list, false);
            }
            break;
            case 15: /* reduce AStringType */
            {
                ArrayList<Object> list = new15();
                push(goTo(7), list, false);
            }
            break;
            case 16: /* reduce AAblockblock1Block */
            {
                ArrayList<Object> list = new16();
                push(goTo(8), list, false);
            }
            break;
            case 17: /* reduce AAblockblock2Block */
            {
                ArrayList<Object> list = new17();
                push(goTo(8), list, false);
            }
            break;
            case 18: /* reduce ADeclStm */
            {
                ArrayList<Object> list = new18();
                push(goTo(9), list, false);
            }
            break;
            case 19: /* reduce AAssignStm */
            {
                ArrayList<Object> list = new19();
                push(goTo(9), list, false);
            }
            break;
            case 20: /* reduce AIfStm */
            {
                ArrayList<Object> list = new20();
                push(goTo(9), list, false);
            }
            break;
            case 21: /* reduce AIfElseStm */
            {
                ArrayList<Object> list = new21();
                push(goTo(9), list, false);
            }
            break;
            case 22: /* reduce AWhileStm */
            {
                ArrayList<Object> list = new22();
                push(goTo(9), list, false);
            }
            break;
            case 23: /* reduce ACallStm */
            {
                ArrayList<Object> list = new23();
                push(goTo(9), list, false);
            }
            break;
            case 24: /* reduce AAreturnstm1Stm */
            {
                ArrayList<Object> list = new24();
                push(goTo(9), list, false);
            }
            break;
            case 25: /* reduce AAreturnstm2Stm */
            {
                ArrayList<Object> list = new25();
                push(goTo(9), list, false);
            }
            break;
            case 26: /* reduce ABlockStm */
            {
                ArrayList<Object> list = new26();
                push(goTo(9), list, false);
            }
            break;
            case 27: /* reduce AEqualExp */
            {
                ArrayList<Object> list = new27();
                push(goTo(10), list, false);
            }
            break;
            case 28: /* reduce ALtExp */
            {
                ArrayList<Object> list = new28();
                push(goTo(10), list, false);
            }
            break;
            case 29: /* reduce ASimpleExp */
            {
                ArrayList<Object> list = new29();
                push(goTo(10), list, false);
            }
            break;
            case 30: /* reduce AAddArith */
            {
                ArrayList<Object> list = new30();
                push(goTo(11), list, false);
            }
            break;
            case 31: /* reduce ASubArith */
            {
                ArrayList<Object> list = new31();
                push(goTo(11), list, false);
            }
            break;
            case 32: /* reduce ASimpleArith */
            {
                ArrayList<Object> list = new32();
                push(goTo(11), list, false);
            }
            break;
            case 33: /* reduce AMulFac */
            {
                ArrayList<Object> list = new33();
                push(goTo(12), list, false);
            }
            break;
            case 34: /* reduce ASimpleFac */
            {
                ArrayList<Object> list = new34();
                push(goTo(12), list, false);
            }
            break;
            case 35: /* reduce AExpoPow */
            {
                ArrayList<Object> list = new35();
                push(goTo(13), list, false);
            }
            break;
            case 36: /* reduce ASimplePow */
            {
                ArrayList<Object> list = new36();
                push(goTo(13), list, false);
            }
            break;
            case 37: /* reduce AParTerm */
            {
                ArrayList<Object> list = new37();
                push(goTo(14), list, false);
            }
            break;
            case 38: /* reduce ANumTerm */
            {
                ArrayList<Object> list = new38();
                push(goTo(14), list, false);
            }
            break;
            case 39: /* reduce AFalseTerm */
            {
                ArrayList<Object> list = new39();
                push(goTo(14), list, false);
            }
            break;
            case 40: /* reduce ATrueTerm */
            {
                ArrayList<Object> list = new40();
                push(goTo(14), list, false);
            }
            break;
            case 41: /* reduce AStringTerm */
            {
                ArrayList<Object> list = new41();
                push(goTo(14), list, false);
            }
            break;
            case 42: /* reduce AVarTerm */
            {
                ArrayList<Object> list = new42();
                push(goTo(14), list, false);
            }
            break;
            case 43: /* reduce ACallTerm */
            {
                ArrayList<Object> list = new43();
                push(goTo(14), list, false);
            }
            break;
            case 44: /* reduce AAcall1Call */
            {
                ArrayList<Object> list = new44();
                push(goTo(15), list, false);
            }
            break;
            case 45: /* reduce AAcall2Call */
            {
                ArrayList<Object> list = new45();
                push(goTo(15), list, false);
            }
            break;
            case 46: /* reduce AAargs1Args */
            {
                ArrayList<Object> list = new46();
                push(goTo(16), list, false);
            }
            break;
            case 47: /* reduce AAargs2Args */
            {
                ArrayList<Object> list = new47();
                push(goTo(16), list, false);
            }
            break;
            case 48: /* reduce AAdditionalArg */
            {
                ArrayList<Object> list = new48();
                push(goTo(17), list, false);
            }
            break;
            case 49: /* reduce AArg */
            {
                ArrayList<Object> list = new49();
                push(goTo(18), list, false);
            }
            break;
            case 50: /* reduce ATerminal$Func */
            {
                ArrayList<Object> list = new50();
                push(goTo(19), list, true);
            }
            break;
            case 51: /* reduce ANonTerminal$Func */
            {
                ArrayList<Object> list = new51();
                push(goTo(19), list, true);
            }
            break;
            case 52: /* reduce ATerminal$AdditionalParam */
            {
                ArrayList<Object> list = new52();
                push(goTo(20), list, true);
            }
            break;
            case 53: /* reduce ANonTerminal$AdditionalParam */
            {
                ArrayList<Object> list = new53();
                push(goTo(20), list, true);
            }
            break;
            case 54: /* reduce ATerminal$Stm */
            {
                ArrayList<Object> list = new54();
                push(goTo(21), list, true);
            }
            break;
            case 55: /* reduce ANonTerminal$Stm */
            {
                ArrayList<Object> list = new55();
                push(goTo(21), list, true);
            }
            break;
            case 56: /* reduce ATerminal$AdditionalArg */
            {
                ArrayList<Object> list = new56();
                push(goTo(22), list, true);
            }
            break;
            case 57: /* reduce ANonTerminal$AdditionalArg */
            {
                ArrayList<Object> list = new57();
                push(goTo(22), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprogram1Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PBlock pblockNode3;
        {
            // Block
        }
        pblockNode3 = (PBlock)nodeArrayList1.get(0);

        pprogramNode1 = new AProgram(listNode2, pblockNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprogram2Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PBlock pblockNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pblockNode4 = (PBlock)nodeArrayList2.get(0);

        pprogramNode1 = new AProgram(listNode3, pblockNode4);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAfunc1Func */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunc pfuncNode1;
        {
            // Block
        TFun tfunNode2;
        TId tidNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        PBody pbodyNode8;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        pbodyNode8 = (PBody)nodeArrayList5.get(0);

        pfuncNode1 = new AFunc(tfunNode2, tidNode3, tlparNode4, null, trparNode6, null, pbodyNode8);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAfunc2Func */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunc pfuncNode1;
        {
            // Block
        TFun tfunNode2;
        TId tidNode3;
        TLPar tlparNode4;
        PParams pparamsNode5;
        TRPar trparNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        PBody pbodyNode8;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pparamsNode5 = (PParams)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        pbodyNode8 = (PBody)nodeArrayList6.get(0);

        pfuncNode1 = new AFunc(tfunNode2, tidNode3, tlparNode4, pparamsNode5, trparNode6, null, pbodyNode8);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAfunc3Func */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunc pfuncNode1;
        {
            // Block
        TFun tfunNode2;
        TId tidNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        PReturnType preturntypeNode7;
        PBody pbodyNode8;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        preturntypeNode7 = (PReturnType)nodeArrayList5.get(0);
        pbodyNode8 = (PBody)nodeArrayList6.get(0);

        pfuncNode1 = new AFunc(tfunNode2, tidNode3, tlparNode4, null, trparNode6, preturntypeNode7, pbodyNode8);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAfunc4Func */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunc pfuncNode1;
        {
            // Block
        TFun tfunNode2;
        TId tidNode3;
        TLPar tlparNode4;
        PParams pparamsNode5;
        TRPar trparNode6;
        PReturnType preturntypeNode7;
        PBody pbodyNode8;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pparamsNode5 = (PParams)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        preturntypeNode7 = (PReturnType)nodeArrayList6.get(0);
        pbodyNode8 = (PBody)nodeArrayList7.get(0);

        pfuncNode1 = new AFunc(tfunNode2, tidNode3, tlparNode4, pparamsNode5, trparNode6, preturntypeNode7, pbodyNode8);
        }
	nodeList.add(pfuncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ABlockBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBody pbodyNode1;
        {
            // Block
        PBlock pblockNode2;
        pblockNode2 = (PBlock)nodeArrayList1.get(0);

        pbodyNode1 = new ABlockBody(pblockNode2);
        }
	nodeList.add(pbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AInternalBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBody pbodyNode1;
        {
            // Block
        TSemi tsemiNode2;
        tsemiNode2 = (TSemi)nodeArrayList1.get(0);

        pbodyNode1 = new AInternalBody(tsemiNode2);
        }
	nodeList.add(pbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AAparams1Params */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParams pparamsNode1;
        {
            // Block
        PParam pparamNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pparamNode2 = (PParam)nodeArrayList1.get(0);
        {
            // Block
        }

        pparamsNode1 = new AParams(pparamNode2, listNode3);
        }
	nodeList.add(pparamsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAparams2Params */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParams pparamsNode1;
        {
            // Block
        PParam pparamNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pparamNode2 = (PParam)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pparamsNode1 = new AParams(pparamNode2, listNode4);
        }
	nodeList.add(pparamsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAdditionalParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditionalParam padditionalparamNode1;
        {
            // Block
        TComma tcommaNode2;
        PParam pparamNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pparamNode3 = (PParam)nodeArrayList2.get(0);

        padditionalparamNode1 = new AAdditionalParam(tcommaNode2, pparamNode3);
        }
	nodeList.add(padditionalparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParam pparamNode1;
        {
            // Block
        TId tidNode2;
        TColon tcolonNode3;
        PType ptypeNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        ptypeNode4 = (PType)nodeArrayList3.get(0);

        pparamNode1 = new AParam(tidNode2, tcolonNode3, ptypeNode4);
        }
	nodeList.add(pparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AReturnType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReturnType preturntypeNode1;
        {
            // Block
        TColon tcolonNode2;
        PType ptypeNode3;
        tcolonNode2 = (TColon)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);

        preturntypeNode1 = new AReturnType(tcolonNode2, ptypeNode3);
        }
	nodeList.add(preturntypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AIntType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptypeNode1 = new AIntType(tintNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ABoolType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBool tboolNode2;
        tboolNode2 = (TBool)nodeArrayList1.get(0);

        ptypeNode1 = new ABoolType(tboolNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AStringType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        ptypeNode1 = new AStringType(tstringNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AAblockblock1Block */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLBrace tlbraceNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TRBrace trbraceNode4;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        {
            // Block
        }
        trbraceNode4 = (TRBrace)nodeArrayList2.get(0);

        pblockNode1 = new ABlockBlock(tlbraceNode2, listNode3, trbraceNode4);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAblockblock2Block */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLBrace tlbraceNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TRBrace trbraceNode5;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        trbraceNode5 = (TRBrace)nodeArrayList3.get(0);

        pblockNode1 = new ABlockBlock(tlbraceNode2, listNode4, trbraceNode5);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ADeclStm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStm pstmNode1;
        {
            // Block
        TVar tvarNode2;
        TId tidNode3;
        TAssign tassignNode4;
        PExp pexpNode5;
        TSemi tsemiNode6;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tassignNode4 = (TAssign)nodeArrayList3.get(0);
        pexpNode5 = (PExp)nodeArrayList4.get(0);
        tsemiNode6 = (TSemi)nodeArrayList5.get(0);

        pstmNode1 = new ADeclStm(tvarNode2, tidNode3, tassignNode4, pexpNode5, tsemiNode6);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAssignStm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStm pstmNode1;
        {
            // Block
        TId tidNode2;
        TAssign tassignNode3;
        PExp pexpNode4;
        TSemi tsemiNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tassignNode3 = (TAssign)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tsemiNode5 = (TSemi)nodeArrayList4.get(0);

        pstmNode1 = new AAssignStm(tidNode2, tassignNode3, pexpNode4, tsemiNode5);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AIfStm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStm pstmNode1;
        {
            // Block
        TIf tifNode2;
        TLPar tlparNode3;
        PExp pexpNode4;
        TRPar trparNode5;
        PBlock pblockNode6;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        pblockNode6 = (PBlock)nodeArrayList5.get(0);

        pstmNode1 = new AIfStm(tifNode2, tlparNode3, pexpNode4, trparNode5, pblockNode6);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AIfElseStm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStm pstmNode1;
        {
            // Block
        TIf tifNode2;
        TLPar tlparNode3;
        PExp pexpNode4;
        TRPar trparNode5;
        PBlock pblockNode6;
        TElse telseNode7;
        PBlock pblockNode8;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        pblockNode6 = (PBlock)nodeArrayList5.get(0);
        telseNode7 = (TElse)nodeArrayList6.get(0);
        pblockNode8 = (PBlock)nodeArrayList7.get(0);

        pstmNode1 = new AIfElseStm(tifNode2, tlparNode3, pexpNode4, trparNode5, pblockNode6, telseNode7, pblockNode8);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AWhileStm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStm pstmNode1;
        {
            // Block
        TWhile twhileNode2;
        TLPar tlparNode3;
        PExp pexpNode4;
        TRPar trparNode5;
        PBlock pblockNode6;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        pblockNode6 = (PBlock)nodeArrayList5.get(0);

        pstmNode1 = new AWhileStm(twhileNode2, tlparNode3, pexpNode4, trparNode5, pblockNode6);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ACallStm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStm pstmNode1;
        {
            // Block
        PCall pcallNode2;
        TSemi tsemiNode3;
        pcallNode2 = (PCall)nodeArrayList1.get(0);
        tsemiNode3 = (TSemi)nodeArrayList2.get(0);

        pstmNode1 = new ACallStm(pcallNode2, tsemiNode3);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAreturnstm1Stm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStm pstmNode1;
        {
            // Block
        TReturn treturnNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TSemi tsemiNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        tsemiNode4 = (TSemi)nodeArrayList2.get(0);

        pstmNode1 = new AReturnStm(treturnNode2, null, tsemiNode4);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAreturnstm2Stm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStm pstmNode1;
        {
            // Block
        TReturn treturnNode2;
        PExp pexpNode3;
        TSemi tsemiNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tsemiNode4 = (TSemi)nodeArrayList3.get(0);

        pstmNode1 = new AReturnStm(treturnNode2, pexpNode3, tsemiNode4);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ABlockStm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStm pstmNode1;
        {
            // Block
        PBlock pblockNode2;
        pblockNode2 = (PBlock)nodeArrayList1.get(0);

        pstmNode1 = new ABlockStm(pblockNode2);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AEqualExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PArith parithNode2;
        TEqual tequalNode3;
        PArith parithNode4;
        parithNode2 = (PArith)nodeArrayList1.get(0);
        tequalNode3 = (TEqual)nodeArrayList2.get(0);
        parithNode4 = (PArith)nodeArrayList3.get(0);

        pexpNode1 = new AEqualExp(parithNode2, tequalNode3, parithNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ALtExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PArith parithNode2;
        TLt tltNode3;
        PArith parithNode4;
        parithNode2 = (PArith)nodeArrayList1.get(0);
        tltNode3 = (TLt)nodeArrayList2.get(0);
        parithNode4 = (PArith)nodeArrayList3.get(0);

        pexpNode1 = new ALtExp(parithNode2, tltNode3, parithNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ASimpleExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PArith parithNode2;
        parithNode2 = (PArith)nodeArrayList1.get(0);

        pexpNode1 = new ASimpleExp(parithNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AAddArith */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArith parithNode1;
        {
            // Block
        PArith parithNode2;
        TPlus tplusNode3;
        PFac pfacNode4;
        parithNode2 = (PArith)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pfacNode4 = (PFac)nodeArrayList3.get(0);

        parithNode1 = new AAddArith(parithNode2, tplusNode3, pfacNode4);
        }
	nodeList.add(parithNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ASubArith */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArith parithNode1;
        {
            // Block
        PArith parithNode2;
        TMinus tminusNode3;
        PFac pfacNode4;
        parithNode2 = (PArith)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pfacNode4 = (PFac)nodeArrayList3.get(0);

        parithNode1 = new ASubArith(parithNode2, tminusNode3, pfacNode4);
        }
	nodeList.add(parithNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ASimpleArith */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArith parithNode1;
        {
            // Block
        PFac pfacNode2;
        pfacNode2 = (PFac)nodeArrayList1.get(0);

        parithNode1 = new ASimpleArith(pfacNode2);
        }
	nodeList.add(parithNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AMulFac */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFac pfacNode1;
        {
            // Block
        PFac pfacNode2;
        TStar tstarNode3;
        PPow ppowNode4;
        pfacNode2 = (PFac)nodeArrayList1.get(0);
        tstarNode3 = (TStar)nodeArrayList2.get(0);
        ppowNode4 = (PPow)nodeArrayList3.get(0);

        pfacNode1 = new AMulFac(pfacNode2, tstarNode3, ppowNode4);
        }
	nodeList.add(pfacNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ASimpleFac */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFac pfacNode1;
        {
            // Block
        PPow ppowNode2;
        ppowNode2 = (PPow)nodeArrayList1.get(0);

        pfacNode1 = new ASimpleFac(ppowNode2);
        }
	nodeList.add(pfacNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AExpoPow */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPow ppowNode1;
        {
            // Block
        PTerm ptermNode2;
        TCaret tcaretNode3;
        PPow ppowNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tcaretNode3 = (TCaret)nodeArrayList2.get(0);
        ppowNode4 = (PPow)nodeArrayList3.get(0);

        ppowNode1 = new AExpoPow(ptermNode2, tcaretNode3, ppowNode4);
        }
	nodeList.add(ppowNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ASimplePow */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPow ppowNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        ppowNode1 = new ASimplePow(ptermNode2);
        }
	nodeList.add(ppowNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AParTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TLPar tlparNode2;
        PExp pexpNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        ptermNode1 = new AParTerm(tlparNode2, pexpNode3, trparNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ANumTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TNum tnumNode2;
        tnumNode2 = (TNum)nodeArrayList1.get(0);

        ptermNode1 = new ANumTerm(tnumNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AFalseTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        ptermNode1 = new AFalseTerm(tfalseNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ATrueTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        ptermNode1 = new ATrueTerm(ttrueNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AStringTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TStringLiteral tstringliteralNode2;
        tstringliteralNode2 = (TStringLiteral)nodeArrayList1.get(0);

        ptermNode1 = new AStringTerm(tstringliteralNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AVarTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        ptermNode1 = new AVarTerm(tidNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ACallTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PCall pcallNode2;
        pcallNode2 = (PCall)nodeArrayList1.get(0);

        ptermNode1 = new ACallTerm(pcallNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AAcall1Call */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCall pcallNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRPar trparNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode5 = (TRPar)nodeArrayList3.get(0);

        pcallNode1 = new ACall(tidNode2, tlparNode3, null, trparNode5);
        }
	nodeList.add(pcallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AAcall2Call */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCall pcallNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        PArgs pargsNode4;
        TRPar trparNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pargsNode4 = (PArgs)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pcallNode1 = new ACall(tidNode2, tlparNode3, pargsNode4, trparNode5);
        }
	nodeList.add(pcallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AAargs1Args */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgs pargsNode1;
        {
            // Block
        PArg pargNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pargNode2 = (PArg)nodeArrayList1.get(0);
        {
            // Block
        }

        pargsNode1 = new AArgs(pargNode2, listNode3);
        }
	nodeList.add(pargsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AAargs2Args */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgs pargsNode1;
        {
            // Block
        PArg pargNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pargNode2 = (PArg)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pargsNode1 = new AArgs(pargNode2, listNode4);
        }
	nodeList.add(pargsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AAdditionalArg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditionalArg padditionalargNode1;
        {
            // Block
        TComma tcommaNode2;
        PArg pargNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pargNode3 = (PArg)nodeArrayList2.get(0);

        padditionalargNode1 = new AAdditionalArg(tcommaNode2, pargNode3);
        }
	nodeList.add(padditionalargNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AArg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArg pargNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList1.get(0);

        pargNode1 = new AArg(pexpNode2);
        }
	nodeList.add(pargNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ATerminal$Func */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PFunc pfuncNode1;
        pfuncNode1 = (PFunc)nodeArrayList1.get(0);
	if(pfuncNode1 != null)
	{
	  listNode2.add(pfuncNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ANonTerminal$Func */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PFunc pfuncNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pfuncNode2 = (PFunc)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pfuncNode2 != null)
	{
	  listNode3.add(pfuncNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce ATerminal$AdditionalParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAdditionalParam padditionalparamNode1;
        padditionalparamNode1 = (PAdditionalParam)nodeArrayList1.get(0);
	if(padditionalparamNode1 != null)
	{
	  listNode2.add(padditionalparamNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ANonTerminal$AdditionalParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAdditionalParam padditionalparamNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        padditionalparamNode2 = (PAdditionalParam)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(padditionalparamNode2 != null)
	{
	  listNode3.add(padditionalparamNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ATerminal$Stm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStm pstmNode1;
        pstmNode1 = (PStm)nodeArrayList1.get(0);
	if(pstmNode1 != null)
	{
	  listNode2.add(pstmNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ANonTerminal$Stm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStm pstmNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstmNode2 = (PStm)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstmNode2 != null)
	{
	  listNode3.add(pstmNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ATerminal$AdditionalArg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAdditionalArg padditionalargNode1;
        padditionalargNode1 = (PAdditionalArg)nodeArrayList1.get(0);
	if(padditionalargNode1 != null)
	{
	  listNode2.add(padditionalargNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ANonTerminal$AdditionalArg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAdditionalArg padditionalargNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        padditionalargNode2 = (PAdditionalArg)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(padditionalargNode2 != null)
	{
	  listNode3.add(padditionalargNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {9, SHIFT, 1}, {17, SHIFT, 2}, },
			{{-1, ERROR, 1}, {9, SHIFT, 1}, {10, SHIFT, 7}, {18, SHIFT, 8}, {20, SHIFT, 9}, {23, SHIFT, 10}, {24, SHIFT, 11}, {27, SHIFT, 12}, },
			{{-1, ERROR, 2}, {27, SHIFT, 17}, },
			{{-1, ERROR, 3}, {28, ACCEPT, -1}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 6}, {9, SHIFT, 1}, {17, SHIFT, 2}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 8}, {7, SHIFT, 20}, },
			{{-1, ERROR, 9}, {7, SHIFT, 21}, {12, SHIFT, 22}, {16, SHIFT, 23}, {22, SHIFT, 24}, {25, SHIFT, 25}, {26, SHIFT, 26}, {27, SHIFT, 27}, },
			{{-1, ERROR, 10}, {27, SHIFT, 34}, },
			{{-1, ERROR, 11}, {7, SHIFT, 35}, },
			{{-1, ERROR, 12}, {4, SHIFT, 36}, {7, SHIFT, 37}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 15}, {12, SHIFT, 38}, },
			{{-1, ERROR, 16}, {9, SHIFT, 1}, {10, SHIFT, 39}, {18, SHIFT, 8}, {20, SHIFT, 9}, {23, SHIFT, 10}, {24, SHIFT, 11}, {27, SHIFT, 12}, },
			{{-1, ERROR, 17}, {7, SHIFT, 41}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 20}, {7, SHIFT, 21}, {16, SHIFT, 23}, {22, SHIFT, 24}, {25, SHIFT, 25}, {26, SHIFT, 26}, {27, SHIFT, 27}, },
			{{-1, ERROR, 21}, {7, SHIFT, 21}, {16, SHIFT, 23}, {22, SHIFT, 24}, {25, SHIFT, 25}, {26, SHIFT, 26}, {27, SHIFT, 27}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 42}, {7, SHIFT, 37}, },
			{{-1, ERROR, 28}, {12, SHIFT, 44}, },
			{{-1, REDUCE, 29}, {0, SHIFT, 45}, {1, SHIFT, 46}, {5, SHIFT, 47}, {6, SHIFT, 48}, },
			{{-1, REDUCE, 32}, {2, SHIFT, 49}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 36}, {3, SHIFT, 50}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 34}, {4, SHIFT, 51}, },
			{{-1, ERROR, 35}, {7, SHIFT, 21}, {16, SHIFT, 23}, {22, SHIFT, 24}, {25, SHIFT, 25}, {26, SHIFT, 26}, {27, SHIFT, 27}, },
			{{-1, ERROR, 36}, {7, SHIFT, 21}, {16, SHIFT, 23}, {22, SHIFT, 24}, {25, SHIFT, 25}, {26, SHIFT, 26}, {27, SHIFT, 27}, },
			{{-1, ERROR, 37}, {7, SHIFT, 21}, {8, SHIFT, 54}, {16, SHIFT, 23}, {22, SHIFT, 24}, {25, SHIFT, 25}, {26, SHIFT, 26}, {27, SHIFT, 27}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 41}, {8, SHIFT, 58}, {27, SHIFT, 59}, },
			{{-1, ERROR, 42}, {8, SHIFT, 62}, },
			{{-1, ERROR, 43}, {8, SHIFT, 63}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 45}, {7, SHIFT, 21}, {16, SHIFT, 23}, {22, SHIFT, 24}, {25, SHIFT, 25}, {26, SHIFT, 26}, {27, SHIFT, 27}, },
			{{-1, ERROR, 46}, {7, SHIFT, 21}, {16, SHIFT, 23}, {22, SHIFT, 24}, {25, SHIFT, 25}, {26, SHIFT, 26}, {27, SHIFT, 27}, },
			{{-1, ERROR, 47}, {7, SHIFT, 21}, {16, SHIFT, 23}, {22, SHIFT, 24}, {25, SHIFT, 25}, {26, SHIFT, 26}, {27, SHIFT, 27}, },
			{{-1, ERROR, 48}, {7, SHIFT, 21}, {16, SHIFT, 23}, {22, SHIFT, 24}, {25, SHIFT, 25}, {26, SHIFT, 26}, {27, SHIFT, 27}, },
			{{-1, ERROR, 49}, {7, SHIFT, 21}, {16, SHIFT, 23}, {22, SHIFT, 24}, {25, SHIFT, 25}, {26, SHIFT, 26}, {27, SHIFT, 27}, },
			{{-1, ERROR, 50}, {7, SHIFT, 21}, {16, SHIFT, 23}, {22, SHIFT, 24}, {25, SHIFT, 25}, {26, SHIFT, 26}, {27, SHIFT, 27}, },
			{{-1, ERROR, 51}, {7, SHIFT, 21}, {16, SHIFT, 23}, {22, SHIFT, 24}, {25, SHIFT, 25}, {26, SHIFT, 26}, {27, SHIFT, 27}, },
			{{-1, ERROR, 52}, {8, SHIFT, 71}, },
			{{-1, ERROR, 53}, {12, SHIFT, 72}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 56}, {8, SHIFT, 73}, },
			{{-1, REDUCE, 46}, {11, SHIFT, 74}, },
			{{-1, ERROR, 58}, {9, SHIFT, 1}, {12, SHIFT, 77}, {13, SHIFT, 78}, },
			{{-1, ERROR, 59}, {13, SHIFT, 82}, },
			{{-1, ERROR, 60}, {8, SHIFT, 83}, },
			{{-1, REDUCE, 8}, {11, SHIFT, 84}, },
			{{-1, ERROR, 62}, {9, SHIFT, 1}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 30}, {2, SHIFT, 49}, },
			{{-1, REDUCE, 31}, {2, SHIFT, 49}, },
			{{-1, REDUCE, 27}, {0, SHIFT, 45}, {1, SHIFT, 46}, },
			{{-1, REDUCE, 28}, {0, SHIFT, 45}, {1, SHIFT, 46}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 70}, {12, SHIFT, 88}, },
			{{-1, ERROR, 71}, {9, SHIFT, 1}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 74}, {7, SHIFT, 21}, {16, SHIFT, 23}, {22, SHIFT, 24}, {25, SHIFT, 25}, {26, SHIFT, 26}, {27, SHIFT, 27}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 47}, {11, SHIFT, 74}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 78}, {14, SHIFT, 92}, {19, SHIFT, 93}, {21, SHIFT, 94}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 80}, {9, SHIFT, 1}, {12, SHIFT, 77}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 82}, {14, SHIFT, 92}, {19, SHIFT, 93}, {21, SHIFT, 94}, },
			{{-1, ERROR, 83}, {9, SHIFT, 1}, {12, SHIFT, 77}, {13, SHIFT, 78}, },
			{{-1, ERROR, 84}, {27, SHIFT, 59}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 9}, {11, SHIFT, 84}, },
			{{-1, REDUCE, 20}, {15, SHIFT, 102}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 99}, {9, SHIFT, 1}, {12, SHIFT, 77}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 102}, {9, SHIFT, 1}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 21}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 3}, },
			{{-1, 4}, {6, 18}, },
			{{-1, 79}, {80, 96}, {83, 98}, {99, 103}, },
			{{-1, 60}, },
			{{-1, 85}, {86, 101}, },
			{{-1, 61}, {84, 100}, },
			{{-1, 80}, {83, 99}, },
			{{-1, 95}, {82, 97}, },
			{{-1, 81}, {0, 5}, {1, 13}, {6, 19}, {16, 13}, {62, 87}, {71, 89}, {102, 104}, },
			{{-1, 14}, {16, 40}, },
			{{-1, 55}, {9, 28}, {20, 42}, {21, 43}, {35, 52}, {36, 53}, {51, 70}, },
			{{-1, 29}, {47, 66}, {48, 67}, },
			{{-1, 30}, {45, 64}, {46, 65}, },
			{{-1, 31}, {49, 68}, {50, 69}, },
			{{-1, 32}, },
			{{-1, 33}, {1, 15}, {16, 15}, },
			{{-1, 56}, },
			{{-1, 75}, {76, 91}, },
			{{-1, 57}, {74, 90}, },
			{{-1, 6}, },
			{{-1, 86}, },
			{{-1, 16}, },
			{{-1, 76}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: '{', 'fun'",
			"expecting: '{', '}', 'if', 'return', 'var', 'while', id",
			"expecting: id",
			"expecting: EOF",
			"expecting: '{', '}', 'else', 'fun', 'if', 'return', 'var', 'while', id, EOF",
			"expecting: '('",
			"expecting: '(', ';', 'false', 'true', num, string literal, id",
			"expecting: '=', '('",
			"expecting: ';'",
			"expecting: '(', 'false', 'true', num, string literal, id",
			"expecting: '+', '-', '*', '^', '==', '<', ')', ',', ';'",
			"expecting: '+', '-', '*', '^', '==', '<', '(', ')', ',', ';'",
			"expecting: '+', '-', '==', '<', ')', ',', ';'",
			"expecting: '+', '-', '*', '==', '<', ')', ',', ';'",
			"expecting: '='",
			"expecting: '(', ')', 'false', 'true', num, string literal, id",
			"expecting: ')', id",
			"expecting: ')'",
			"expecting: ')', ','",
			"expecting: '{', ';', ':'",
			"expecting: ':'",
			"expecting: '{'",
			"expecting: '+', '-', ')', ',', ';'",
			"expecting: 'bool', 'int', 'string'",
			"expecting: '{', ';'",
			"expecting: '{', '}', 'else', 'if', 'return', 'var', 'while', id",
			"expecting: ')', '{', ',', ';'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 0, 3, 0, 4, 5, 6, 2, 5, 7, 1, 1, 8, 1, 5, 0, 3, 9, 9, 1, 10, 10, 10, 10, 11, 8, 12, 13, 13, 10, 10, 14, 9, 9, 15, 1, 4, 1, 16, 17, 17, 1, 9, 9, 9, 9, 9, 9, 9, 17, 8, 10, 18, 17, 18, 19, 20, 17, 18, 21, 10, 13, 13, 22, 22, 13, 13, 8, 21, 1, 10, 9, 18, 18, 0, 23, 0, 24, 0, 23, 19, 2, 18, 18, 25, 1, 1, 18, 18, 26, 26, 26, 24, 0, 18, 0, 24, 18, 18, 21, 0, 1, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
