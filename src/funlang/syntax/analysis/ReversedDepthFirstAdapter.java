/* This file was generated by SableCC (http://www.sablecc.org/). */

package funlang.syntax.analysis;

import java.util.*;
import funlang.syntax.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        {
            List<PFunc> copy = new ArrayList<PFunc>(node.getFunc());
            Collections.reverse(copy);
            for(PFunc e : copy)
            {
                e.apply(this);
            }
        }
        outAProgram(node);
    }

    public void inAFunc(AFunc node)
    {
        defaultIn(node);
    }

    public void outAFunc(AFunc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunc(AFunc node)
    {
        inAFunc(node);
        if(node.getBody() != null)
        {
            node.getBody().apply(this);
        }
        if(node.getReturnType() != null)
        {
            node.getReturnType().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getParams() != null)
        {
            node.getParams().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getFun() != null)
        {
            node.getFun().apply(this);
        }
        outAFunc(node);
    }

    public void inABlockBody(ABlockBody node)
    {
        defaultIn(node);
    }

    public void outABlockBody(ABlockBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockBody(ABlockBody node)
    {
        inABlockBody(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outABlockBody(node);
    }

    public void inAInternalBody(AInternalBody node)
    {
        defaultIn(node);
    }

    public void outAInternalBody(AInternalBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInternalBody(AInternalBody node)
    {
        inAInternalBody(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAInternalBody(node);
    }

    public void inAParams(AParams node)
    {
        defaultIn(node);
    }

    public void outAParams(AParams node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParams(AParams node)
    {
        inAParams(node);
        {
            List<PAdditionalParam> copy = new ArrayList<PAdditionalParam>(node.getAdditionalParam());
            Collections.reverse(copy);
            for(PAdditionalParam e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getParam() != null)
        {
            node.getParam().apply(this);
        }
        outAParams(node);
    }

    public void inAAdditionalParam(AAdditionalParam node)
    {
        defaultIn(node);
    }

    public void outAAdditionalParam(AAdditionalParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdditionalParam(AAdditionalParam node)
    {
        inAAdditionalParam(node);
        if(node.getParam() != null)
        {
            node.getParam().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAAdditionalParam(node);
    }

    public void inAParam(AParam node)
    {
        defaultIn(node);
    }

    public void outAParam(AParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParam(AParam node)
    {
        inAParam(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAParam(node);
    }

    public void inAReturnType(AReturnType node)
    {
        defaultIn(node);
    }

    public void outAReturnType(AReturnType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnType(AReturnType node)
    {
        inAReturnType(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        outAReturnType(node);
    }

    public void inAIntType(AIntType node)
    {
        defaultIn(node);
    }

    public void outAIntType(AIntType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        inAIntType(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntType(node);
    }

    public void inABoolType(ABoolType node)
    {
        defaultIn(node);
    }

    public void outABoolType(ABoolType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolType(ABoolType node)
    {
        inABoolType(node);
        if(node.getBool() != null)
        {
            node.getBool().apply(this);
        }
        outABoolType(node);
    }

    public void inAStringType(AStringType node)
    {
        defaultIn(node);
    }

    public void outAStringType(AStringType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringType(AStringType node)
    {
        inAStringType(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringType(node);
    }

    public void inABlockBlock(ABlockBlock node)
    {
        defaultIn(node);
    }

    public void outABlockBlock(ABlockBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockBlock(ABlockBlock node)
    {
        inABlockBlock(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        {
            List<PStm> copy = new ArrayList<PStm>(node.getStm());
            Collections.reverse(copy);
            for(PStm e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        outABlockBlock(node);
    }

    public void inADeclStm(ADeclStm node)
    {
        defaultIn(node);
    }

    public void outADeclStm(ADeclStm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclStm(ADeclStm node)
    {
        inADeclStm(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outADeclStm(node);
    }

    public void inAAssignStm(AAssignStm node)
    {
        defaultIn(node);
    }

    public void outAAssignStm(AAssignStm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignStm(AAssignStm node)
    {
        inAAssignStm(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAssignStm(node);
    }

    public void inAIfStm(AIfStm node)
    {
        defaultIn(node);
    }

    public void outAIfStm(AIfStm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStm(AIfStm node)
    {
        inAIfStm(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfStm(node);
    }

    public void inAIfElseStm(AIfElseStm node)
    {
        defaultIn(node);
    }

    public void outAIfElseStm(AIfElseStm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElseStm(AIfElseStm node)
    {
        inAIfElseStm(node);
        if(node.getElseBlock() != null)
        {
            node.getElseBlock().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getThenBlock() != null)
        {
            node.getThenBlock().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfElseStm(node);
    }

    public void inAWhileStm(AWhileStm node)
    {
        defaultIn(node);
    }

    public void outAWhileStm(AWhileStm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStm(AWhileStm node)
    {
        inAWhileStm(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outAWhileStm(node);
    }

    public void inACallStm(ACallStm node)
    {
        defaultIn(node);
    }

    public void outACallStm(ACallStm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallStm(ACallStm node)
    {
        inACallStm(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getCall() != null)
        {
            node.getCall().apply(this);
        }
        outACallStm(node);
    }

    public void inAReturnStm(AReturnStm node)
    {
        defaultIn(node);
    }

    public void outAReturnStm(AReturnStm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnStm(AReturnStm node)
    {
        inAReturnStm(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outAReturnStm(node);
    }

    public void inABlockStm(ABlockStm node)
    {
        defaultIn(node);
    }

    public void outABlockStm(ABlockStm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockStm(ABlockStm node)
    {
        inABlockStm(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outABlockStm(node);
    }

    public void inAEqualExp(AEqualExp node)
    {
        defaultIn(node);
    }

    public void outAEqualExp(AEqualExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualExp(AEqualExp node)
    {
        inAEqualExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAEqualExp(node);
    }

    public void inALtExp(ALtExp node)
    {
        defaultIn(node);
    }

    public void outALtExp(ALtExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtExp(ALtExp node)
    {
        inALtExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outALtExp(node);
    }

    public void inASimpleExp(ASimpleExp node)
    {
        defaultIn(node);
    }

    public void outASimpleExp(ASimpleExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleExp(ASimpleExp node)
    {
        inASimpleExp(node);
        if(node.getArith() != null)
        {
            node.getArith().apply(this);
        }
        outASimpleExp(node);
    }

    public void inAAddArith(AAddArith node)
    {
        defaultIn(node);
    }

    public void outAAddArith(AAddArith node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddArith(AAddArith node)
    {
        inAAddArith(node);
        if(node.getFac() != null)
        {
            node.getFac().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getArith() != null)
        {
            node.getArith().apply(this);
        }
        outAAddArith(node);
    }

    public void inASubArith(ASubArith node)
    {
        defaultIn(node);
    }

    public void outASubArith(ASubArith node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubArith(ASubArith node)
    {
        inASubArith(node);
        if(node.getFac() != null)
        {
            node.getFac().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getArith() != null)
        {
            node.getArith().apply(this);
        }
        outASubArith(node);
    }

    public void inASimpleArith(ASimpleArith node)
    {
        defaultIn(node);
    }

    public void outASimpleArith(ASimpleArith node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleArith(ASimpleArith node)
    {
        inASimpleArith(node);
        if(node.getFac() != null)
        {
            node.getFac().apply(this);
        }
        outASimpleArith(node);
    }

    public void inAMulFac(AMulFac node)
    {
        defaultIn(node);
    }

    public void outAMulFac(AMulFac node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMulFac(AMulFac node)
    {
        inAMulFac(node);
        if(node.getPow() != null)
        {
            node.getPow().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getFac() != null)
        {
            node.getFac().apply(this);
        }
        outAMulFac(node);
    }

    public void inASimpleFac(ASimpleFac node)
    {
        defaultIn(node);
    }

    public void outASimpleFac(ASimpleFac node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleFac(ASimpleFac node)
    {
        inASimpleFac(node);
        if(node.getPow() != null)
        {
            node.getPow().apply(this);
        }
        outASimpleFac(node);
    }

    public void inAExpoPow(AExpoPow node)
    {
        defaultIn(node);
    }

    public void outAExpoPow(AExpoPow node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpoPow(AExpoPow node)
    {
        inAExpoPow(node);
        if(node.getPow() != null)
        {
            node.getPow().apply(this);
        }
        if(node.getCaret() != null)
        {
            node.getCaret().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAExpoPow(node);
    }

    public void inASimplePow(ASimplePow node)
    {
        defaultIn(node);
    }

    public void outASimplePow(ASimplePow node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimplePow(ASimplePow node)
    {
        inASimplePow(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outASimplePow(node);
    }

    public void inAParTerm(AParTerm node)
    {
        defaultIn(node);
    }

    public void outAParTerm(AParTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParTerm(AParTerm node)
    {
        inAParTerm(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAParTerm(node);
    }

    public void inANumTerm(ANumTerm node)
    {
        defaultIn(node);
    }

    public void outANumTerm(ANumTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumTerm(ANumTerm node)
    {
        inANumTerm(node);
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        outANumTerm(node);
    }

    public void inAFalseTerm(AFalseTerm node)
    {
        defaultIn(node);
    }

    public void outAFalseTerm(AFalseTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseTerm(AFalseTerm node)
    {
        inAFalseTerm(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseTerm(node);
    }

    public void inATrueTerm(ATrueTerm node)
    {
        defaultIn(node);
    }

    public void outATrueTerm(ATrueTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueTerm(ATrueTerm node)
    {
        inATrueTerm(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueTerm(node);
    }

    public void inAStringTerm(AStringTerm node)
    {
        defaultIn(node);
    }

    public void outAStringTerm(AStringTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringTerm(AStringTerm node)
    {
        inAStringTerm(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAStringTerm(node);
    }

    public void inAVarTerm(AVarTerm node)
    {
        defaultIn(node);
    }

    public void outAVarTerm(AVarTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarTerm(AVarTerm node)
    {
        inAVarTerm(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVarTerm(node);
    }

    public void inACallTerm(ACallTerm node)
    {
        defaultIn(node);
    }

    public void outACallTerm(ACallTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallTerm(ACallTerm node)
    {
        inACallTerm(node);
        if(node.getCall() != null)
        {
            node.getCall().apply(this);
        }
        outACallTerm(node);
    }

    public void inACall(ACall node)
    {
        defaultIn(node);
    }

    public void outACall(ACall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACall(ACall node)
    {
        inACall(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getArgs() != null)
        {
            node.getArgs().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outACall(node);
    }

    public void inAArgs(AArgs node)
    {
        defaultIn(node);
    }

    public void outAArgs(AArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgs(AArgs node)
    {
        inAArgs(node);
        {
            List<PAdditionalArg> copy = new ArrayList<PAdditionalArg>(node.getAdditionalArgs());
            Collections.reverse(copy);
            for(PAdditionalArg e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getArg() != null)
        {
            node.getArg().apply(this);
        }
        outAArgs(node);
    }

    public void inAAdditionalArg(AAdditionalArg node)
    {
        defaultIn(node);
    }

    public void outAAdditionalArg(AAdditionalArg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdditionalArg(AAdditionalArg node)
    {
        inAAdditionalArg(node);
        if(node.getArg() != null)
        {
            node.getArg().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAAdditionalArg(node);
    }

    public void inAArg(AArg node)
    {
        defaultIn(node);
    }

    public void outAArg(AArg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArg(AArg node)
    {
        inAArg(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAArg(node);
    }
}
