/* This file was generated by SableCC (http://www.sablecc.org/). */

package funlang.syntax.analysis;

import funlang.syntax.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseAFunc(AFunc node);
    void caseABlockBody(ABlockBody node);
    void caseAInternalBody(AInternalBody node);
    void caseAParams(AParams node);
    void caseAAdditionalParam(AAdditionalParam node);
    void caseAParam(AParam node);
    void caseAReturnType(AReturnType node);
    void caseAIntType(AIntType node);
    void caseABoolType(ABoolType node);
    void caseAStringType(AStringType node);
    void caseABlockBlock(ABlockBlock node);
    void caseADeclStm(ADeclStm node);
    void caseAAssignStm(AAssignStm node);
    void caseAIfStm(AIfStm node);
    void caseAIfElseStm(AIfElseStm node);
    void caseAWhileStm(AWhileStm node);
    void caseACallStm(ACallStm node);
    void caseAReturnStm(AReturnStm node);
    void caseABlockStm(ABlockStm node);
    void caseAEqualExp(AEqualExp node);
    void caseALtExp(ALtExp node);
    void caseASimpleExp(ASimpleExp node);
    void caseAAddArith(AAddArith node);
    void caseASubArith(ASubArith node);
    void caseASimpleArith(ASimpleArith node);
    void caseAMulFac(AMulFac node);
    void caseASimpleFac(ASimpleFac node);
    void caseAExpoPow(AExpoPow node);
    void caseASimplePow(ASimplePow node);
    void caseAParTerm(AParTerm node);
    void caseANumTerm(ANumTerm node);
    void caseAFalseTerm(AFalseTerm node);
    void caseATrueTerm(ATrueTerm node);
    void caseAStringTerm(AStringTerm node);
    void caseAVarTerm(AVarTerm node);
    void caseACallTerm(ACallTerm node);
    void caseACall(ACall node);
    void caseAArgs(AArgs node);
    void caseAAdditionalArg(AAdditionalArg node);
    void caseAArg(AArg node);

    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTStar(TStar node);
    void caseTCaret(TCaret node);
    void caseTAssign(TAssign node);
    void caseTEqual(TEqual node);
    void caseTLt(TLt node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTComma(TComma node);
    void caseTSemi(TSemi node);
    void caseTColon(TColon node);
    void caseTBool(TBool node);
    void caseTElse(TElse node);
    void caseTFalse(TFalse node);
    void caseTFun(TFun node);
    void caseTIf(TIf node);
    void caseTInt(TInt node);
    void caseTReturn(TReturn node);
    void caseTString(TString node);
    void caseTTrue(TTrue node);
    void caseTVar(TVar node);
    void caseTWhile(TWhile node);
    void caseTNum(TNum node);
    void caseTStringLiteral(TStringLiteral node);
    void caseTId(TId node);
    void caseTBlank(TBlank node);
    void caseTComment(TComment node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
